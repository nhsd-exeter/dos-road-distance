pipeline {
  agent any
  parameters {
    choice(name: 'ENVIRONMENT', choices: ['test', 'test1', 'test2', 'test3', 'test4', 'fix', 'performance', 'regression'], description: 'Environment to test')
    choice(name: 'SCENARIO', choices: ['scenario1.py', 'scenario1b.py', 'scenario2.py', 'scenario2b.py', 'scenario3.py', 'scenario4.py'], description: 'Performance scenario to run')
  }
  options {
    buildDiscarder(logRotator(daysToKeepStr: "7", numToKeepStr: "13"))
    disableConcurrentBuilds()
    parallelsAlwaysFailFast()
  }
  environment {
    BUILD_DATE = sh(returnStdout: true, script: "date -u +'%Y-%m-%dT%H:%M:%S%z'").trim()
    PROFILE = "nonprod"
    ENVIRONMENT = "${params.ENVIRONMENT}"
    LOCUST_LOCUSTFILE = "${params.SCENARIO}"
  }
  stages {
    stage("Show Configuration") {
      steps { sh "make show-configuration" }
    }
    stage("Delete Previous Job") {
      steps{
        script {
          try { sh "make performance-delete" }
          catch (Exception e) { echo 'Job not deleted' }
        }
      }
    }
    stage ("Provision") {
      steps {
        script { sh "make provision STACKS=performance ENVIRONMENT=nonprod | tee /tmp/terraform_changes.txt" }
      }
    }
    stage ("Build") {
      steps {
        script {
          sh "make performance-build"
          sh "make performance-push"
        }
      }
    }
    stage ("Deploy Job One") {
      when {
        beforeInput true
        beforeAgent true
        expression { params.SCENARIO == "scenario1.py" || params.SCENARIO == "scenario1b.py" || params.SCENARIO == "scenario4.py" }
      }
      input {
        message "Select Scenario Parameters"
        parameters {
          string(name: 'USERS', defaultValue: '5', description: 'Number of users to run')
          string(name: 'RATE', defaultValue: '1', description: 'Spawn rate of users per second')
          string(name: 'RUNTIME', defaultValue: '60', description: 'Time to run tests in seconds')
        }
      }
      environment {
        LOCUST_USERS = "${USERS}"
        LOCUST_SPAWN_RATE = "${RATE}"
        LOCUST_RUN_TIME = "${RUNTIME}s"
      }
      steps {
        script { sh "make performance-deploy PROFILE=performance SECONDS=${RUNTIME}" }
      }
    }
    stage ("Deploy Job Two") {
      when {
        beforeInput true
        beforeAgent true
        expression { params.SCENARIO == "scenario2.py" || params.SCENARIO == "scenario2b.py" ||params.SCENARIO == "scenario3.py" }
      }
      steps {
        script { sh "make performance-deploy SECONDS=3500" }
      }
    }
    stage ("Deployment Summary") {
      steps {
        script { sh "make deployment-summary" }
      }
    }
    stage ("Show ConfigMap Values") {
      steps {
        script {
          sh "make performance-show-config PROFILE=nonprod"
        }
      }
    }
  }
  post {
    always { sh "make pipeline-send-notification PIPELINE_NAME='Road Distance (Performance)' BUILD_STATUS=${currentBuild.currentResult}" }
    cleanup { sh "make clean && make performance-delete" }
  }
}
