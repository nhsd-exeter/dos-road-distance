pipeline {
  agent any
  parameters {
    choice(name: 'ENVIRONMENT', choices: ['test', 'test1', 'test2', 'test3', 'test4', 'fix', 'performance', 'regression'], description: 'Environment to test')
    choice(name: 'SCENARIO', choices: ['scenario1.py', 'scenario1b.py', 'scenario2.py', 'scenario2b.py', 'scenario3.py', 'scenario4.py'], description: 'Performance scenario to run')
  }
  options {
    buildDiscarder(logRotator(daysToKeepStr: "7", numToKeepStr: "13"))
    disableConcurrentBuilds()
    parallelsAlwaysFailFast()
  }
  environment {
    BUILD_DATE = sh(returnStdout: true, script: "date -u +'%Y-%m-%dT%H:%M:%S%z'").trim()
    PROFILE = "nonprod"
    ENVIRONMENT = "${params.ENVIRONMENT}"
    LOCUST_LOCUSTFILE = "${params.SCENARIO}"
    PERF_TEST_HOST = "https://uqh6i1a6dg.execute-api.eu-west-2.amazonaws.com/${params.ENVIRONMENT}"
  }
  stages {
    stage('Init Perf Test Host') {
      steps {
        script {
          def baseUrl = sh(
            script: "aws secretsmanager get-secret-value --secret-id uec-dos-rd-performance/deployment --query 'SecretString' --output text | jq -r '.ROAD_DISTANCE_API_ENDPOINT'",
            returnStdout: true
          ).trim()
          env.PERF_TEST_HOST = "${baseUrl}/${params.ENVIRONMENT}"
        }
      }
    }
    stage("Show Configuration") {
      steps { sh "make show-configuration" }
    }
    stage("Delete Previous Job") {
      steps{
        script {
          try { sh "make performance-delete" }
          catch (Exception e) { echo 'Job not deleted' }
        }
      }
    }
    stage ("Provision") {
      steps {
        script {
          try {
            sh "make provision STACKS=performance ENVIRONMENT=nonprod | tee /tmp/terraform_changes.txt"
          } catch (Exception e) {
            echo "Terraform provisioning failed: ${e.getMessage()}"
            echo "Attempting to break state lock and retry..."
            sh """
              eval "\$(make aws-assume-role-export-variables)"

              # Query DynamoDB to find any locks for this state file
              echo "Searching for existing terraform locks..."
              LOCKS=\$(make -s docker-run-tools ARGS="\$(echo aws | grep awslocal > /dev/null 2>&1 && echo '--env LOCALSTACK_HOST=localstack.rd.local' ||:)" CMD="aws dynamodb scan --table-name nhsd-texasplatform-terraform-service-state-lock-texas-lk8s-nonprod --filter-expression 'contains(#info, :path)' --expression-attribute-names '{\"#info\": \"Info\"}' --expression-attribute-values '{\": {\\\"S\\\": \\\"uec-dos-rd/nonprod/performance/terraform.state\\\"}}' --query 'Items[].LockID.S' --output text" 2>/dev/null || echo "")

              if [ ! -z "\$LOCKS" ]; then
                for LOCK_ID in \$LOCKS; do
                  echo "Found lock ID: \$LOCK_ID - attempting to delete..."
                  make -s docker-run-tools ARGS="\$(echo aws | grep awslocal > /dev/null 2>&1 && echo '--env LOCALSTACK_HOST=localstack.rd.local' ||:)" CMD="aws dynamodb delete-item --table-name nhsd-texasplatform-terraform-service-state-lock-texas-lk8s-nonprod --key '{\"LockID\": {\"S\": \"\$LOCK_ID\"}}'" || echo "Failed to delete lock \$LOCK_ID"
                  # Also try terraform force-unlock approach as backup for each lock
                  echo "Attempting terraform force-unlock as backup for lock \$LOCK_ID..."
                  make -s docker-run-terraform DIR="/var/jenkins_home/workspace/\${JOB_NAME}/infrastructure/stacks/performance" CMD="force-unlock -force \$LOCK_ID" || echo "Force unlock failed or lock not found for \$LOCK_ID"
                done
              else
                echo "No locks found for performance terraform state"
              fi
            """
            sh "make provision STACKS=performance ENVIRONMENT=nonprod | tee /tmp/terraform_changes.txt"
          }
        }
      }
    }
    stage ("Build") {
      steps {
        script {
          sh "make performance-build"
          sh "make performance-push"
        }
      }
    }
    stage ("Deploy Job One") {
      when {
        beforeInput true
        beforeAgent true
        expression { params.SCENARIO == "scenario1.py" || params.SCENARIO == "scenario1b.py" || params.SCENARIO == "scenario4.py" }
      }
      input {
        message "Select Scenario Parameters"
        parameters {
          string(name: 'USERS', defaultValue: '5', description: 'Number of users to run')
          string(name: 'RATE', defaultValue: '1', description: 'Spawn rate of users per seconds')
          string(name: 'RUNTIME', defaultValue: '60', description: 'Time to run tests in seconds')
        }
      }
      environment {
        LOCUST_USERS = "${USERS}"
        LOCUST_SPAWN_RATE = "${RATE}"
        LOCUST_RUN_TIME = "${RUNTIME}s"
      }
      steps {
        script { sh "make performance-deploy PROFILE=performance SECONDS=\$((\${RUNTIME} + 60))" }
      }
    }
    stage ("Deploy Job Two") {
      when {
        beforeInput true
        beforeAgent true
        expression { params.SCENARIO == "scenario2.py" || params.SCENARIO == "scenario2b.py" ||params.SCENARIO == "scenario3.py" }
      }
      environment {
        LOCUST_USERS = "1"
        LOCUST_SPAWN_RATE = "1"
        LOCUST_RUN_TIME = "1s"
      }
      steps {
        script { sh "make performance-deploy SECONDS=3500" }
      }
    }
    stage ("Deployment Summary") {
      steps {
        script { sh "make deployment-summary" }
      }
    }
  }
  post {
    always { sh "make pipeline-send-notification PIPELINE_NAME='Road Distance (Performance)' BUILD_STATUS=${currentBuild.currentResult}" }
    cleanup { sh "make clean && make performance-delete" }
  }
}
